#'   (MILC) calculated using the codon usage of highly expressed genes as the
#'   expected bias}
#'   \item{CPB}{Genome-wide codon pair bias (Coleman et al. 2008)}
#'   \item{FilteredSequences}{Number of gene sequences filtered out during
#'   calulation (due to length and/or presence of ambiguous bases)}
#'   \item{d}{Predicted doubling time in hours}
#'   \item{LowerCI}{Lower CI of \code{d} (2.5%) from linear model}
#'   \item{UpperCI}{Upper CI of \code{d} (97.5%) from linear model}
#' }
#' @examples
#' # Load in example genome (Streptococcus pyogenes M1, downloaded from RefSeq)
#' # included with gRodon
#' path_to_genome <- system.file('extdata',
#'   'GCF_000349925.2_ASM34992v2_cds_from_genomic.fna.gz',
#'   package = 'gRodon2')
#' genes <- readDNAStringSet(path_to_genome)
#'
#' # Search pre-existing annotations for ribosomal proteins, which we
#' # will use as our set of highly expressed genes
#' highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
#'
#' # Run the gRodon growth prediction pipeline
#' predictGrowth(genes, highly_expressed)
#'
#' # Run gRodon with temperature option (not needed for mesophiles, gRodon not
#' # validated on extremophiles, use with care)
#' predictGrowth(genes, highly_expressed, temperature = 37)
#'
#' @export
#' @importFrom magrittr "%>%"
#' @importFrom dplyr group_by mutate count summarise
#' @importFrom matrixStats weightedMedian
#' @import coRdon
#' @import Biostrings
predictGrowth <- function(genes,
highly_expressed,
mode = "full",
temperature = "none",
training_set = "vs",
depth_of_coverage = NULL,
fragments = FALSE,
genetic_code = NULL,
bg = "all"){
if(! mode %in% c("full","partial","metagenome","eukaryote","meta_testing","meta_nogc_testing")){
stop("Invalid mode. Please pick an available prediction mode (\"full\", \"partial\", \"metagenome\", \"eukaryote\")")
}
if((! training_set  %in% c("vs","madin")) & mode!="eukaryote"){
stop("Invalid training set. Please pick an available model (\"vs\", \"madin\")")
}
if(sum(highly_expressed)<10){
warning("Less than 10 highly expressed genes provided, performance may suffer")
}
if(!(mode %in% c("metagenome","meta_testing","meta_nogc_testing")) & !is.null(depth_of_coverage)){
warning("Ignoring depth_of_coverage because not in metagenome mode")
depth_of_coverage <- NULL
}
if(mode=="metagenome" & is.null(depth_of_coverage)){
warning("Provide depth_of_coverage for your ORFs for a more realistic average community growth rate")
}
if(is.null(genetic_code) & mode=="eukaryote"){
genetic_code <- "1"
} else if(is.null(genetic_code)){
genetic_code <- "11"
} else {
genetic_code <- as.character(genetic_code)
warning("Models were trained with a default genetic code of '1' for eukaryotes and '11' for prokaryotes. See https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi")
}
if(temperature=="none" & mode=="eukaryote"){
warning("For best results for eukaryotes an optimal growth temperature must be provided. Much of the variation in max. growth rate between species is explained by temperature, independent of any diffferences in codon usage.")
}
# Calculate codon data
if(bg=="all"){
codon_stats <- getCodonStatistics(genes = genes,
highly_expressed = highly_expressed,
fragments = fragments,
depth_of_coverage = depth_of_coverage,
genetic_code = genetic_code)
codon_stats$dCUB <- (codon_stats$CUB-codon_stats$CUBHE)/codon_stats$CUB
# Predict growth rate (stored models - sysdata.rda)
if(training_set=="vs" & mode!="eukaryote" & mode!="meta_testing" & mode!="meta_nogc_testing"){
if(temperature == "none" & mode=="full"){
pred <- stats::predict.lm(gRodon_model_base,
newdata = codon_stats,
interval = "confidence")
} else if(temperature == "none" & mode=="metagenome"){
pred <- stats::predict.lm(gRodon_model_meta,
newdata = codon_stats,
interval = "confidence")
} else if(temperature == "none" & mode=="partial"){
pred <- stats::predict.lm(gRodon_model_partial,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="full"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_temp,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="metagenome"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_meta_temp,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="partial"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_partial_temp,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_milc,
back_transform = TRUE)
} else if(mode!="eukaryote" & mode!="meta_testing" & mode!="meta_nogc_testing"){
if(temperature == "none" & mode=="full"){
pred <- stats::predict.lm(gRodon_model_base_madin,
newdata = codon_stats,
interval = "confidence")
} else if(temperature == "none" & mode=="metagenome"){
pred <- stats::predict.lm(gRodon_model_meta_madin,
newdata = codon_stats,
interval = "confidence")
} else if(temperature == "none" & mode=="partial"){
pred <- stats::predict.lm(gRodon_model_partial_madin,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="full"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_temp_madin,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="metagenome"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_meta_temp_madin,
newdata = codon_stats,
interval = "confidence")
} else if(temperature != "none" & mode=="partial"){
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_partial_temp_madin,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_milc_madin,
back_transform = TRUE)
} else if(mode=="eukaryote"){
if(temperature == "none"){
pred <- stats::predict.lm(gRodon_model_base_euk,
newdata = codon_stats,
interval = "confidence")
} else {
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_temp_euk,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_milc_euk,
back_transform = TRUE)
} else if(mode=="meta_testing"){
if(temperature == "none"){
pred <- stats::predict.lm(gRodon_model_newmeta,
newdata = codon_stats,
interval = "confidence")
} else {
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_newmeta_temp,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_newmeta,
back_transform = TRUE)
} else if(mode=="meta_nogc_testing"){
if(temperature == "none"){
pred <- stats::predict.lm(gRodon_model_newmeta_nogc,
newdata = codon_stats,
interval = "confidence")
} else {
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_newmeta_nogc_temp,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_newmeta,
back_transform = TRUE)
}
} else if(bg=="individual"){
if(!(mode %in% c("meta_testing","meta_nogc_testing"))){
stop("Mode not compatible with gene-level CUB calculations")
}
codon_stats <- getCodonStatistics_i(genes = genes,
highly_expressed = highly_expressed,
fragments = fragments,
depth_of_coverage = depth_of_coverage,
genetic_code = genetic_code)
codon_stats$dCUB <- (codon_stats$CUB-codon_stats$CUBHE)/codon_stats$CUB
if(mode=="meta_testing"){
if(temperature == "none"){
pred <- stats::predict.lm(gRodon_model_newmeta_i,
newdata = codon_stats,
interval = "confidence")
} else {
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_newmeta_temp_i,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_newmeta_i,
back_transform = TRUE)
} else if(mode=="meta_nogc_testing"){
if(temperature == "none"){
pred <- stats::predict.lm(gRodon_model_newmeta_nogc_i,
newdata = codon_stats,
interval = "confidence")
} else {
codon_stats$OGT <- temperature
pred <- stats::predict.lm(gRodon_model_newmeta_nogc_temp_i,
newdata = codon_stats,
interval = "confidence")
}
#Transform back from box-cox
pred_back_transformed <- boxcoxTransform(pred,
lambda_newmeta_i,
back_transform = TRUE)
}
} else{
stop("Feature in testing, please set bg==\"all\" for normal gRodon behavior")
}
#attach prediction
codon_stats$d <- pred_back_transformed[,"fit"]
codon_stats$LowerCI <- pred_back_transformed[,"lwr"]
codon_stats$UpperCI <- pred_back_transformed[,"upr"]
#Return
if(is.na(pred_back_transformed[,"fit"]) & pred[,"fit"]>6){
warning("Estimated doubling time very long. Essentially goes to infinity (gives NA value after back-transforming from box-cox).")
} else if(pred_back_transformed[,"fit"]>5 & mode!="eukaryote"){
warning("Estimated doubling time >5 hours. CUB signal saturates at approx. 5 hrs... gRodon may underestimate doubling times above this range. Consider simply reporting as '>5hrs'. (In other words, this microbe definitely grows slowly, but we can't tell you quite how slowly).")
} else if(pred_back_transformed[,"fit"]>40 & mode=="eukaryote"){
warning("Estimated doubling time >40 hours. CUB signal saturates at approx. 40 hrs for eukaryotes... gRodon may underestimate doubling times above this range. Consider simply reporting as '>40hrs'. (In other words, this microbe definitely grows slowly, but we can't tell you quite how slowly).")
}
return(as.list(codon_stats))
}
fitModels(stat_data, stat_data_extremo)
View(stat_data_extremo)
#' Fit gRodon GC-corrected models
#'
#' This function fits the gRodon GC-corrected metagenome mode models
#'
#' @param stat_data dataframe with codon usage statistics and known doubling times
fitGCModels <- function(stat_data, stat_data_extremo){
stat_data <- stat_data %>%
mutate(dCUB=(CUB-CUBHE)/CUB)
stat_data_extremo <- stat_data_extremo %>%
mutate(dCUB=(CUB-CUBHE)/CUB)
bc_meta <- boxcox(d~dCUB+GCdiv,data=stat_data)
lambda_meta <- bc_meta$x[which.max(bc_meta$y)]
#new metagenome mode
meta_model_base <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+GCdiv,data=stat_data)
meta_model_temp <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+GCdiv+OGT,data=stat_data_extremo)
#new metagenome mode without gc cor
meta_nogc_model_base <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB,data=stat_data)
meta_nogc_model_temp <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+OGT,data=stat_data_extremo)
#old metagenome mode (for individual-gene fitting)
bc_oldmeta <- boxcox(d~CUBHE,data=stat_data)
lambda_oldmeta <- bc_oldmeta$x[which.max(bc_oldmeta$y)]
meta_old_model_base <-
lm(boxcoxTransform(d, lambda_oldmeta) ~ CUBHE,data=stat_data)
meta_old_model_temp <-
lm(boxcoxTransform(d, lambda_oldmeta) ~ CUBHE+OGT,data=stat_data_extremo)
return(list(meta_model_base,
meta_model_temp,
meta_nogc_model_base,
meta_nogc_model_temp,
lambda_meta,
meta_old_model_base,
meta_model_temp,
lambda_oldmeta))
}
model_list <- gRodon:::fitGCModels(stat_data, stat_data_extremo)
model_list <- fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
gRodon_model_newmeta_temp_i <- model_list[[2]]
gRodon_model_newmeta_nogc_i <- model_list[[3]]
gRodon_model_newmeta_nogc_temp_i <- model_list[[4]]
lambda_newmeta_i <- model_list[[5]]
gRodon_model_meta_madin_i <- model_list[[6]]
gRodon_model_meta_temp_madin_i <- model_list[[7]]
lambda_milc_madin_i <- model_list[[8]]
summary(gRodon_model_meta_madin_i)
summary(gRodon_model_newmeta_nogc_i)
summary(gRodon_model_newmeta_i)
setwd("~/gRodon2/R/")
load("sysdata.rda")
save(gRodon_model_base_madin,
gRodon_model_temp_madin,
gRodon_model_partial_madin,
gRodon_model_partial_temp_madin,
gRodon_model_meta_madin,
gRodon_model_meta_temp_madin,
lambda_milc_madin,
gRodon_model_base,
gRodon_model_temp,
gRodon_model_partial,
gRodon_model_partial_temp,
gRodon_model_meta,
gRodon_model_meta_temp,
lambda_milc,
gRodon_model_newmeta,
gRodon_model_newmeta_temp,
gRodon_model_newmeta_nogc,
gRodon_model_newmeta_nogc_temp,
lambda_newmeta,
gRodon_model_meta_madin_i,
gRodon_model_meta_temp_madin_i,
lambda_milc_madin_i,
gRodon_model_newmeta_i,
gRodon_model_newmeta_temp_i,
gRodon_model_newmeta_nogc_i,
gRodon_model_newmeta_nogc_temp_i,
lambda_newmeta_i,
file="sysdata.rda")
build()
devtools::build()
devtools::build()
load_all()
devtools::load_all()
?predictGrowth()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::load_all()
?predictGrowth
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
getwd()
source("~/gRodon2/R/codon_pair_bias.R")
source("~/gRodon2/R/codon_usage_bias.R")
source("~/gRodon2/R/fit_gRodon.R")
source("~/gRodon2/R/fit_gRodon.R")
source("~/gRodon2/R/predict_growth.R")
source("~/gRodon2/R/utilities.R")
library(dplyr)
library(data.table)
library(MASS)
library(gRodon)
library(parallel)
library(Biostrings)
library(coRdon)
library(matrixStats)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
cui <- getStatisticsBatch("~/gRodon2/inst/extdata/euk_genomes/",
genetic_code = "1",
mc.cores = 1,
bg = "individual")
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
load("~/gRodon2/R/sysdata.rda")
summary(gRodon_model_base_euk)
summary(gRodon_model_temp_euk)
load("~/gRodon2/R/sysdata.rda")
devtools::document()
devtools::test()
devtools::check()
dBdt(1,1,1,1,1,0.1)
dBdt <- function(q,u,qb,qp,dp,w){
return(u*(1-qb/q) - dp*(1-qp/Q) - w)
}
dBdt(1,1,1,1,1,0.1)
return(u*(1-qb/q) - dp*(1-qp/q) - w)
dBdt <- function(q,u,qb,qp,dp,w){
return(u*(1-qb/q) - dp*(1-qp/q) - w)
}
dBdt(1,1,1,1,1,0.1)
lapply(seq(0,1e3,1),dBdt,u=1,qb=1,qp=1,dp=1,w=0.1)
x <- lapply(seq(0,1,.o1),dBdt,u=1,qb=1,qp=1,dp=1,w=0.1) %>% unlist()
x <- lapply(seq(0,1,.01),dBdt,u=1,qb=1,qp=1,dp=1,w=0.1) %>% unlist()
plot(x)
x <- lapply(seq(0,1,.01),dBdt,u=1,qb=0.6,qp=1,dp=1,w=0.1) %>% unlist()
x <- lapply(seq(0,1,.01),dBdt,u=1,qb=0.6,qp=1,dp=.1,w=0.1) %>% unlist()
x
plot(x)
x <- seq(0,1,.01)
y <- lapply(x,dBdt,u=1,qb=0.6,qp=1,dp=.1,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
1
x <- seq(0,1,.01)
y <- lapply(x,dBdt,u=1,qb=1,qp=1,dp=.1,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
x <- seq(0,1,.01)
y <- lapply(x,dBdt,u=1,qb=1,qp=1,dp=1,w=0.1) %>% unlist()
plot(x,y)
x <- seq(0,1,.01)
y <- lapply(x,dBdt,u=1,qb=1,qp=1,dp=0.5,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.7,qp=1,dp=0.5,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=0.5,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=0.75,w=0.1) %>% unlist()
plot(x,y)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=0.95,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=1,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=1.1,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=10,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
y <- lapply(x,dBdt,u=1,qb=.4,qp=1,dp=100,w=0.1) %>% unlist()
plot(x,y)
abline(h=0)
plot(x,y,type="l")
abline(h=0)
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=1,dp=100,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.7,dp=100,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=100,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
x <- seq(0,10,.01)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=100,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=10,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1e-5,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1e-3,w=0.1) %>% unlist()
plot(x,y,type="l")
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1e-2,w=0.1) %>% unlist()
plot(x,y,type="l")
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1e-1,w=0.1) %>% unlist()
plot(x,y,type="l")
y <- lapply(x,dBdt,u=0.9,qb=.4,qp=0.5,dp=1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.01,qp=0.5,dp=1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.1,qp=0.01,dp=1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.1,qp=0.01,dp=.1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.01,qp=0.01,dp=.1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
y <- lapply(x,dBdt,u=0.9,qb=.01,qp=0.02,dp=.1,w=0.1) %>% unlist()
plot(x,y,type="l")
abline(h=0,col="red",lty=2)
