}
x <- seq(.5,2,0.1)
y <- lapply(x,getKappa) %>% lapply("[[","kappa") %>% unlist()
plot(x,y,type="l")
abline(v=log10(24))
p2 <- ggplot(data.frame(x=10^x,y=y),aes(x=x,y=y)) + geom_line() +
theme_bw() + ylab(expression("Cohen's " * kappa)) +
xlab("Threshold Doubling Time (Hours)") + scale_x_log10()  +
geom_vline(xintercept=24,lty=2,color="red")
p2
setwd("~/eukgrowth/Figs")
pdf("Classifier.pdf",width=7,height=6)
ggarrange(p1,p2,nrow=2,
labels = c("(a)","(b)"))
dev.off()
p1 <- ggplot(train_df,aes(x=dGR)) +
scale_x_log10() +
geom_density(aes(x=dGR,fill="Predictions (gRodon-Eukaryotic)"),alpha=0.5,lwd=1) +
geom_density(aes(x=Doubling.Time,fill="Actual Values"),alpha=0.5,lwd=1) +
theme_bw() + geom_vline(xintercept=24,lty=2,color="red") +
xlab("Minimal Doubling Time (Hours)") +
theme(legend.title = element_blank()) +
scale_fill_brewer(palette = "Accent")
p1
getKappa <- function(thresh){
cohen.kappa(data.frame(dGR=log10(train_df$dGR)>thresh,
d=log10(train_df$Doubling.Time)>thresh))
}
x <- seq(.5,2,0.1)
y <- lapply(x,getKappa) %>% lapply("[[","kappa") %>% unlist()
plot(x,y,type="l")
abline(v=log10(24))
p2 <- ggplot(data.frame(x=10^x,y=y),aes(x=x,y=y)) + geom_line() +
theme_bw() + ylab(expression("Cohen's " * kappa)) +
xlab("Threshold Doubling Time (Hours)") + scale_x_log10()  +
geom_vline(xintercept=24,lty=2,color="red")
p2
setwd("~/eukgrowth/Figs")
pdf("Classifier.pdf",width=7,height=6)
ggarrange(p1,p2,nrow=2,
labels = c("(a)","(b)"))
dev.off()
?accuracy
lapply(x,getKappa)
getAccuracy <- function(thresh){
sum(log10(train_df$dGR)>thresh==log10(train_df$Doubling.Time)>thresh)/nrow(train_df)
}
getAccuracy <- function(thresh){
sum((log10(train_df$dGR)>thresh)==(log10(train_df$Doubling.Time)>thresh))/nrow(train_df)
}
x <- seq(.5,2,0.1)
y <- lapply(x,getKappa) %>% lapply("[[","kappa") %>% unlist()
y2 <- lapply(x,getAccuracy) %>% unlist()
plot(x,y,type="l")
abline(v=log10(24))
plot(x,y2,type="l")
abline(v=log10(24))
thresh <- 24
thresh <- log10(24)
log10(train_df$dGR)>thresh
log10(train_df$Doubling.Time)>thresh
sum((log10(train_df$dGR)>thresh)==(log10(train_df$Doubling.Time)>thresh))
table((log10(train_df$dGR)>thresh)==(log10(train_df$Doubling.Time)>thresh))
thresh <- log10(2400)
table((log10(train_df$dGR)>thresh)==(log10(train_df$Doubling.Time)>thresh))
sum((train_df$dGR>24)==(train_df$Doubling.Time>24))
sum((train_df$dGR>24)==(train_df$Doubling.Time>24))/nrow(train_df)
p1l <- ggplot(train_df,aes(x=Doubling.Time,y=dGR,fill=OGT)) +
geom_point(alpha=1,size=2,pch=21) +
# xlim(0,125) +
# ylim(0,125) +
scale_x_log10(limits=c(2,250)) +
scale_y_log10(limits=c(2,250)) +
theme_pubclean() +
#geom_smooth(color="darkgrey") +
xlab("Empirical Minimal Doubling Time (Hours)") +
ylab("Predicted Minimal Doubling Time (Hours)") +
geom_abline(slope = 1,intercept = 0,lty=2) +
geom_vline(xintercept = 40,lty=2,color="black") +
# ggtitle("Model with CUB and OGT") +
#geom_smooth(method="gam",color="gray") +
labs(fill="Optimal Growth\nTemperature (C)") +
# theme(legend.position = c(0.8,0.8)) +
# scale_fill_gradient(high="white",low="black")
scale_fill_gradient(low="white",high="black")
p1l
p3 <- ggplot(train_df,aes(x=Doubling.Time,y=CUBHE,fill=OGT)) +
geom_point(alpha=1,size=2,pch=21) +
#scale_x_log10(limits=c(2.5,80)) +
xlim(2,250) +
theme_pubclean() +
#geom_smooth(method="gam",color="gray") +
geom_smooth(method="loess",fill="black",color="white") +
# geom_smooth(method="lm",aes(color=Doubling.Time>40),fill="black") +
xlab("Empirical Minimal Doubling Time (Hours)") +
ylab("Codon Usage Bias (Ribosomal Proteins)") +
geom_vline(xintercept = 40,lty=2,color="black") +
ggtitle("") +
theme(legend.position = "none") +
# scale_fill_gradient(high="white",low="black")
scale_fill_gradient(low="white",high="black")
p3
p3 <- ggplot(train_df,aes(x=Doubling.Time,y=CUBHE,fill=OGT)) +
geom_point(alpha=1,size=2,pch=21) +
#scale_x_log10(limits=c(2.5,80)) +
xlim(2,250) +
theme_pubclean() +
#geom_smooth(method="gam",color="gray") +
geom_smooth(method="loess",fill="black",color="white") +
# geom_smooth(method="lm",aes(color=Doubling.Time>40),fill="black") +
xlab("Empirical Minimal Doubling Time (Hours)") +
ylab("Codon Usage Bias (Ribosomal Proteins)") +
geom_vline(xintercept = 24,lty=2,color="black") +
ggtitle("") +
theme(legend.position = "none") +
# scale_fill_gradient(high="white",low="black")
scale_fill_gradient(low="white",high="black")
p3
p3 <- ggplot(train_df,aes(x=Doubling.Time,y=CUBHE,fill=OGT)) +
geom_point(alpha=1,size=2,pch=21) +
#scale_x_log10(limits=c(2.5,80)) +
xlim(2,250) +
theme_pubclean() +
#geom_smooth(method="gam",color="gray") +
geom_smooth(method="gam",fill="black",color="white") +
# geom_smooth(method="lm",aes(color=Doubling.Time>40),fill="black") +
xlab("Empirical Minimal Doubling Time (Hours)") +
ylab("Codon Usage Bias (Ribosomal Proteins)") +
geom_vline(xintercept = 24,lty=2,color="black") +
ggtitle("") +
theme(legend.position = "none") +
# scale_fill_gradient(high="white",low="black")
scale_fill_gradient(low="white",high="black")
p3
p3 <- ggplot(train_df,aes(x=Doubling.Time,y=CUBHE,fill=OGT)) +
geom_point(alpha=1,size=2,pch=21) +
#scale_x_log10(limits=c(2.5,80)) +
xlim(2,250) +
theme_pubclean() +
#geom_smooth(method="gam",color="gray") +
geom_smooth(method="loess",fill="black",color="white") +
# geom_smooth(method="lm",aes(color=Doubling.Time>40),fill="black") +
xlab("Empirical Minimal Doubling Time (Hours)") +
ylab("Codon Usage Bias (Ribosomal Proteins)") +
geom_vline(xintercept = 40,lty=2,color="black") +
ggtitle("") +
theme(legend.position = "none") +
# scale_fill_gradient(high="white",low="black")
scale_fill_gradient(low="white",high="black")
p3
load("growth_MMETSP.RData")
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
View(growth_df_mmetsp)
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
View(growth_df_mmetsp)
# add codon usage
load("CodonStatistics_MMETSP.RData")
# add codon usage
load("CodonStatistics_MMETSP.RData")
View(mmetsp_df)
library(igraph)
library(dplyr)
library(ROCR)
library(caret)
er <- erdos.renyi.game(100,p=0.02)
x <- layout.fruchterman.reingold(er)
er_rw <- er %>% rewire(each_edge(p = .1, loops = FALSE))
par(mfrow=c(1,2))
plot(er,vertex.size=0,
edge.width=2,
vertex.label=NA,
edge.color="black",
layout=x)
plot(er_rw,vertex.size=0,
edge.width=2,
vertex.label=NA,
edge.color="black",
layout=x)
par(mfrow=c(1,1))
ba <- barabasi.game(100)
x <- layout.fruchterman.reingold(ba)
ba_rw <- ba %>% rewire(each_edge(p = .1, loops = FALSE))
par(mfrow=c(1,2))
plot(ba,vertex.size=0,
edge.width=2,
vertex.label=NA,
edge.color="black",
layout=x)
plot(ba_rw,vertex.size=0,
edge.width=2,
vertex.label=NA,
edge.color="black",
layout=x)
par(mfrow=c(1,1))
# Load Packages
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(EnvStats)
library(MASS)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(as.data.frame(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)),stringsAsFactors=F))
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# After matching up to MMETSP by hand, load data from Thomas et al and Rose and Caron papers
setwd("~/eukgrowth/Data")
x1 <- read.csv("euk_growth_ogt_Thomas_MMETSP.csv",stringsAsFactors = F) %>%
subset(select=c("MMETSP.Strain","Growth.rate","OGT"))
x1$Source <- "Thomas et al."
x2 <- read.csv("euk_growth_ogt_Rose_MMETSP.csv",stringsAsFactors = F)   %>%
subset(select=c("MMETSP.Strain","Growth.rate","OGT"))
x2$Source <- "Rose and Caron"
y <- rbind(x1,x2) %>% subset(!is.na(MMETSP.Strain))
y$Doubling.Time <- 24*log(2)/y$Growth.rate
y$Growth.rate <- NULL
# Load values matched by literature search
x3 <- read.csv("euk_growth_ogt_Weissman_MMETSP.csv",stringsAsFactors = F)   #%>%
names(x3) <- c("MMETSP.Strain","Doubling.Time","OGT","Source")
x3 <- x3[,c(1,3,4,2)]
growth_rates <- rbind(y,x3)
# Extract species names from strain names
growth_rates$Species.Name <- gsub(";.*","",growth_rates$MMETSP.Strain)
growth_rates$Species.Name[!grepl("sp[.]",growth_rates$Species.Name)] <-
growth_rates$Species.Name[!grepl("sp[.]",growth_rates$Species.Name)] %>%
strsplit(.,split=" ") %>%
lapply(.,"[",1:2) %>%
lapply(.,paste,collapse=" ") %>%
unlist() %>%
gsub(pattern=",",replace="")
# Deduplicate entries (one per species)
growth_rates_dedup <- growth_rates %>%
unique() %>%
group_by(Species.Name) %>%
slice(which.min(Doubling.Time))
growth_rates_dedup$MMETSP.Strain <- NULL
View(growth_rates_dedup)
# Check Normality
qqnorm(growth_rates_dedup$Doubling.Time %>% log10())
qqline(growth_rates_dedup$Doubling.Time %>% log10())
# Test for outliers
test_outliers <- rosnerTest(growth_rates_dedup$Doubling.Time %>% log10())
test_outliers
View(growth_rates_dedup)
spp_id <- read.csv("mmetsp_spp.csv")
spp_id$Species.Name <- spp_id$Species
spp_id$Species.Name[!grepl("sp[.]",spp_id$Species.Name)] <-
spp_id$Species.Name[!grepl("sp[.]",spp_id$Species.Name)] %>%
strsplit(.,split=" ") %>%
lapply(.,"[",1:2) %>%
lapply(.,paste,collapse=" ") %>%
unlist() %>%
gsub(pattern=",",replace="")
head(spp_id)
setwd("~/eukgrowth/Data")
load("growth_RefSeq.RData")
View(growth_df)
# Load Packages
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(EnvStats)
library(MASS)
library(reshape2)
library(psych)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(as.data.frame(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)),stringsAsFactors=F))
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
load("growth_RefSeq.RData")
growth_df$Source <- "RefSeq"
growth_df_mmetsp$Source <- "MMESTP"
growth_df <- rbind(growth_df,growth_df_mmetsp)
# Check Normality
qqnorm(growth_df$Doubling.Time %>% log10())
qqline(growth_df$Doubling.Time %>% log10())
# Test for outliers
rosnerTest(growth_df$Doubling.Time %>% log10())
ggplot(growth_df,aes(x=Doubling.Time)) +
geom_density() +
scale_x_log10() +
xlab("Minimum Doubling Time (Hours)") +
geom_vline(xintercept = 40,lty=2) +
theme_pubclean()
ggplot(growth_df,aes(x=OGT,y=log(2)/Doubling.Time)) +
geom_point() +
scale_y_log10() +
ylab("Maximum Growth Rate (1/Hours)") +
xlab("Optimal Growth Temperature (C)") +
theme_pubclean() +
geom_smooth()
train_df <- growth_df
#linear models
m_milc <- lm(Doubling.Time~CUBHE+OGT,data=train_df)
#transformation
bc_milc <- MASS::boxcox(Doubling.Time~CUBHE+OGT,data=train_df)
lambda_milc <- bc_milc$x[which.max(bc_milc$y)]
# re-run with transformation
mnew_milc <-
lm(boxcoxTransform(Doubling.Time, lambda_milc) ~ CUBHE+OGT,data=train_df)
#Temperature
#transformation
bc_milc_notemp <- MASS::boxcox(Doubling.Time~CUBHE,data=train_df)
lambda_milc_notemp <- bc_milc$x[which.max(bc_milc$y)]
# re-run with transformation
mnew_milc_notemp <-
lm(boxcoxTransform(Doubling.Time, lambda_milc) ~ CUBHE,data=train_df)
#Only Temperature
#transformation
bc_temp <- MASS::boxcox(Doubling.Time~OGT,data=train_df)
lambda_temp <- bc_temp$x[which.max(bc_temp$y)]
# re-run with transformation
mnew_temp <-
lm(boxcoxTransform(Doubling.Time, lambda_temp) ~ OGT,data=train_df)
#look at residuals
ggqqplot(m_milc$residuals)
ggqqplot(mnew_milc$residuals)
ggqqplot(mnew_milc_notemp$residuals)
ggqqplot(mnew_temp$residuals)
summary(mnew_milc)
summary(mnew_milc_notemp)
summary(mnew_temp)
head(train_df)
View(train_df)
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
load("growth_RefSeq.RData")
View(growth_df_mmetsp)
View(growth_df)
# Load Packages
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(EnvStats)
library(MASS)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(as.data.frame(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)),stringsAsFactors=F))
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# After matching up to MMETSP by hand, load data from Thomas et al and Rose and Caron papers
setwd("~/eukgrowth/Data")
x1 <- read.csv("euk_growth_ogt_Thomas_MMETSP.csv",stringsAsFactors = F) %>%
subset(select=c("MMETSP.Strain","Growth.rate","OGT"))
x1$Source <- "Thomas et al."
x2 <- read.csv("euk_growth_ogt_Rose_MMETSP.csv",stringsAsFactors = F)   %>%
subset(select=c("MMETSP.Strain","Growth.rate","OGT"))
x2$Source <- "Rose and Caron"
y <- rbind(x1,x2) %>% subset(!is.na(MMETSP.Strain))
y$Doubling.Time <- 24*log(2)/y$Growth.rate
y$Growth.rate <- NULL
# Load values matched by literature search
x3 <- read.csv("euk_growth_ogt_Weissman_MMETSP.csv",stringsAsFactors = F)   #%>%
names(x3) <- c("MMETSP.Strain","Doubling.Time","OGT","Source")
x3 <- x3[,c(1,3,4,2)]
growth_rates <- rbind(y,x3)
# Extract species names from strain names
growth_rates$Species.Name <- gsub(";.*","",growth_rates$MMETSP.Strain)
growth_rates$Species.Name[!grepl("sp[.]",growth_rates$Species.Name)] <-
growth_rates$Species.Name[!grepl("sp[.]",growth_rates$Species.Name)] %>%
strsplit(.,split=" ") %>%
lapply(.,"[",1:2) %>%
lapply(.,paste,collapse=" ") %>%
unlist() %>%
gsub(pattern=",",replace="")
# Deduplicate entries (one per species)
growth_rates_dedup <- growth_rates %>%
unique() %>%
group_by(Species.Name) %>%
slice(which.min(Doubling.Time))
growth_rates_dedup$MMETSP.Strain <- NULL
# Check Normality
qqnorm(growth_rates_dedup$Doubling.Time %>% log10())
qqline(growth_rates_dedup$Doubling.Time %>% log10())
# Test for outliers
test_outliers <- rosnerTest(growth_rates_dedup$Doubling.Time %>% log10())
test_outliers
View(growth_rates_dedup)
# Load Packages
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(EnvStats)
library(MASS)
library(reshape2)
library(psych)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(as.data.frame(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)),stringsAsFactors=F))
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
load("growth_RefSeq.RData")
growth_df$Source <- "RefSeq"
growth_df_mmetsp$Source <- "MMESTP"
growth_df <- rbind(growth_df,growth_df_mmetsp)
train_df <- growth_df
View(train_df)
x <- read.csv("euk_growth_ogt_Weissman_RefSeq.csv",stringsAsFactors = F)
growth_rates <- data.frame(Accession=character(),
Species.Name=character(),
Doubling.Time=numeric(),
OGT=numeric())
for(i in 1:nrow(x)){
growth_rates <- rbind(growth_rates,
data.frame(Accession=x[i,"Accession"] %>%
strsplit(split=";") %>%
unlist() %>%
gsub(pattern="[.].*",replace=""),
Species.Name=x[i,"Species.Name"],
Doubling.Time=x[i,"Doubling.Time"],
OGT=x[i,"OGT"]))
}
View(growth_rates)
# Load Packages
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(EnvStats)
library(MASS)
library(reshape2)
library(psych)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(as.data.frame(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)),stringsAsFactors=F))
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
setwd("~/eukgrowth/Data")
load("growth_MMETSP.RData")
load("growth_RefSeq.RData")
growth_df$Source <- "RefSeq"
growth_df_mmetsp$Source <- "MMESTP"
growth_df <- rbind(growth_df,growth_df_mmetsp)
# Check Normality
qqnorm(growth_df$Doubling.Time %>% log10())
qqline(growth_df$Doubling.Time %>% log10())
# Test for outliers
rosnerTest(growth_df$Doubling.Time %>% log10())
ggplot(growth_df,aes(x=Doubling.Time)) +
geom_density() +
scale_x_log10() +
xlab("Minimum Doubling Time (Hours)") +
geom_vline(xintercept = 40,lty=2) +
theme_pubclean()
ggplot(growth_df,aes(x=OGT,y=log(2)/Doubling.Time)) +
geom_point() +
scale_y_log10() +
ylab("Maximum Growth Rate (1/Hours)") +
xlab("Optimal Growth Temperature (C)") +
theme_pubclean() +
geom_smooth()
train_df <- growth_df
# add codon usage
load("CodonStatistics_MMETSP.RData")
View(growth_df)
View(growth_df_mmetsp)
View(mmetsp_df)
# add codon usage
load("CodonStatistics_MMETSP.RData")
View(mmetsp_df)
devtools::build(gRodon)
devtools::build(~/gRodon2)
devtools::build("~/gRodon2")
document()
document("~/gRodon2")
devtools::document("~/gRodon2")
