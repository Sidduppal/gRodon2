genes_bg <- c(gene,bg)
l1 <- logical(n+1)
l1[1] <- T
MILC(codonTable(genes_bg))[1,1] %>%
return()
}
singleMILC(genes_list[[1]])
genes_list[[1]]
genes_list[[2]]
singleMILC <- function(gene,n=100){
bg <- replicate(n,shuffleGenes(gene)) %>% DNAStringSet()
print(bg)
print(gene)
genes_bg <- c(gene,bg)
l1 <- logical(n+1)
l1[1] <- T
MILC(codonTable(genes_bg))[1,1] %>%
return()
}
singleMILC(genes_list[[1]])
singleMILC <- function(gene,n=100){
bg <- replicate(n,shuffleGenes(gene)) %>% DNAStringSet()
# print(bg)
# print(gene)
genes_bg <- c(DNAStringSet(gene),bg)
l1 <- logical(n+1)
l1[1] <- T
MILC(codonTable(genes_bg))[1,1] %>%
return()
}
singleMILC(genes_list[[1]])
xlapply(genes_list,singleMILC)
x <- lapply(genes_list,singleMILC)
singleMILC <- function(gene,n=10){
bg <- replicate(n,shuffleGenes(gene)) %>% DNAStringSet()
# print(bg)
# print(gene)
genes_bg <- c(DNAStringSet(gene),bg)
l1 <- logical(n+1)
l1[1] <- T
MILC(codonTable(genes_bg))[1,1] %>%
return()
}
genes_list <- as.list(as.character(genes)) %>%
lapply(DNAString)
x <- lapply(genes_list,singleMILC)
x
unlist(x)
unlist(x) %>% hist()
x2 <- MILC(codonTable(genes))
plot(unlist(x1),x2)
plot(unlist(x),x2)
plot(unlist(x),x2,log="xy")
xdf <- data.frame(V1=unlist(x),
V2=unlist(x2))
ggplot(xdf,aes(x=V1,y=V2)) +
geom_point() +
geom_smooth
ggplot(xdf,aes(x=V1,y=V2)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(xdf,aes(x=V1,y=V2)) +
geom_point() +
geom_smooth()
xdf <- data.frame(V1=unlist(x),
V2=unlist(x2))
head(xdf)
View(xdf)
ggplot(xdf,aes(x=V1,y=self)) +
geom_point() +
geom_smooth()
ggplot(xdf%>%subset(V1>.7),aes(x=V1,y=self)) +
geom_point() +
geom_smooth()
codonTable(fna_tab[1])
cor.test(xdf$V1,xdf$self)
cor.test(xdf$V1[xdf$V1>.7],xdf$self[xdf$V1>.7])
xdf <- data.frame(V1=unlist(x),
V2=unlist(x2),
HE=highly_expressed)
ggplot(xdf%>%subset(V1>.7),aes(x=V1,y=self,color=HE)) +
geom_point() +
geom_smooth()
ggplot(xdf,aes(x=V1,y=self,color=HE)) +
geom_point() +
geom_smooth()
x2
x2[,1]
unlist(x2)
xdf <- data.frame(V1=unlist(x),
V2=x2[,1],
HE=highly_expressed)
head(xdf)
ggplot(xdf%>%subset(V1>.7),aes(x=V1,y=V2)) +
geom_point() +
geom_smooth()
cor.test(xdf$V1,xdf$V2)
cor.test(xdf$V1[xdf$V1>.7],xdf$V2[xdf$V1>.7])
ggplot(xdf,aes(x=V1,y=V2,color=HE)) +
geom_point() +
geom_smooth()
hist(xdf$V1)
hist(xdf$V1[HE])
hist(xdf$V1[xdf$HE])
gene <- genes_list[[1]]
bg <- replicate(n,shuffleGenes(gene)) %>% DNAStringSet()
gene
n <- 10
bg <- replicate(n,shuffleGenes(gene)) %>% DNAStringSet()
genes_bg <- c(DNAStringSet(gene),bg)
l1 <- logical(n+1)
l1[1] <- T
MILC(codonTable(genes_bg))[1,1]
singleMILC(genes_list[[1]])
singleMILC(genes_list[[100]])
singleMILC(genes_list[[1000]])
system.time(singleMILC(genes_list[[1000]]))
system.time(singleMILC(genes_list[[1]]))
0.05*6000
300/60
genes_list_HE <- genes_list[highly_expressed]
genes_list_HE <- genes_list[!highly_expressed]
n_le <- 100
genes_list <- as.list(as.character(genes)) %>%
lapply(DNAString)
genes_list_HE <- genes_list[highly_expressed]
genes_list_LE <- genes_list[!highly_expressed][sample(1:sum(!highly_expressed),n_le)]
x_HE <- lapply(genes_list_HE,singleMILC)
x_HE
x_LE <- lapply(genes_list_LE,singleMILC)
x_LE
hist(x_LE)
hist(x_LE%>%unlist())
hist(x_HE%>%unlist())
x_HE <- lapply(genes_list_HE,singleMILC) %>% unlist()
x_LE <- lapply(genes_list_LE,singleMILC) %>% unlist()
head(x_LE)
mean(x_LE)
mean(x_HE)
median(x_HE)
median(x_LE)
## JLW 2020 - Fit gRodon
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(MASS)
# library(gRodon)
library(parallel)
library(Biostrings)
library(coRdon)
library(stringi)
library(matrixStats)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
setwd("~/gRodon2/inst/extdata/")
load("GrowthRates_Madin.rda")
load("CodonStatistics_individual.rda")
load("Accession2Species_Madin.rda")
cu <- cu %>% mutate_all(unlist)
names(d)[1] <- "Species"
d <- d %>% as.data.frame(stringsAsFactors=F)
# Merge datasets
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Spp <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Spp,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu$Species[cu$Spp %in% d$Species] <- cu$Spp[cu$Spp %in% d$Species]
cu <- merge.easy(cu,d,key="Species") %>% subset(!is.na(Species))
# Average CUB estimates over species
stat_data <- cu %>%
subset(Extremophile == FALSE) %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
# Average CUB estimates over species, including extremophiles
stat_data_extremo <- cu %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
stat_data_extremo$OGT <- stat_data_extremo$OptTemp
stat_data_extremo$OGT[is.na(stat_data_extremo$OGT)] <-
stat_data_extremo$GrowthTemp[is.na(stat_data_extremo$OGT)]
#' Get Codon Statistics
#'
#' Wrapper to estimate codon statistics  for an organism (used to fit gRodon).
#' It is assumed that gene names contain annotations of ribosomal proteins.
#'
#' @param gene_file  path to CDS-containing fasta file
getStatistics <- function(gene_file, genetic_code = "11", bg = "all"){
print(gene_file)
genes <- readDNAStringSet(gene_file)
highly_expressed <- grepl("ribosomal protein",names(genes),ignore.case = T)
# print(table(highly_expressed))
if(sum(highly_expressed)<10){
return(NULL)
} else {
if(bg=="all"){
codon_stats <- try(getCodonStatistics(genes,
highly_expressed,
genetic_code = genetic_code))
} else if(bg=="individual"){
codon_stats <- try(getCodonStatistics_i(genes,
highly_expressed,
genetic_code = genetic_code))
} else{
stop("Feature in testing, please set bg==\"all\" for normal gRodon behavior")
}
codon_stats[["File"]] <- basename(gene_file)
if(!inherits(codon_stats,"try-error")){
return(as.list(codon_stats))
} else {
return(NULL)
}
}
}
#' Get Codon Statistics for All Genomes In a Directory
#'
#' This function gets the codon usage statistics for all CDS files in a directory (used to fit gRodon).
#' It is assumed that gene names contain annotations of ribosomal proteins.
#'
#' @param directory path to directory containing annotated CDS files
getStatisticsBatch <- function(directory, genetic_code="11", mc.cores = 1, bg = "all"){
gene_files <- list.files(directory)
gene_paths <- paste0(directory,gene_files)
cu <- mclapply(X = gene_paths,
FUN = getStatistics,
genetic_code = genetic_code,
bg = bg,
mc.cores = mc.cores) %>%
do.call("rbind", .) %>%
as.data.frame(stringsAsFactors = FALSE) #%>%
# dplyr::mutate(File=gene_files)
return(cu)
}
#' Fit gRodon models
#'
#' This function fits the gRodon models
#'
#' @param stat_data dataframe with codon usage statistics and known doubling times
fitModels <- function(stat_data, stat_data_extremo){
bc_milc <- boxcox(d~CUBHE+ConsistencyHE+CPB,data=stat_data)
bc_milc_euk <- boxcox(d~CUBHE,data=stat_data)
lambda_milc <- bc_milc$x[which.max(bc_milc$y)]
lambda_milc_euk <- bc_milc_euk$x[which.max(bc_milc_euk$y)]
#Full gRodon
gRodon_model_base <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB,data=stat_data)
gRodon_model_temp <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+CPB+OGT,data=stat_data_extremo)
# Partial genome mode
gRodon_model_partial <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE,data=stat_data)
gRodon_model_partial_temp <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+ConsistencyHE+OGT,data=stat_data_extremo)
# Metagenome mode
gRodon_model_meta <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE,data=stat_data)
gRodon_model_meta_temp <-
lm(boxcoxTransform(d, lambda_milc) ~ CUBHE+OGT,data=stat_data_extremo)
# Eukaryotic mode
gRodon_model_euk <-
lm(boxcoxTransform(d, lambda_milc_euk) ~ CUBHE,data=stat_data)
gRodon_model_euk_temp <-
lm(boxcoxTransform(d, lambda_milc_euk) ~ CUBHE+OGT,data=stat_data)
return(list(gRodon_model_base,
gRodon_model_temp,
gRodon_model_partial,
gRodon_model_partial_temp,
gRodon_model_meta,
gRodon_model_meta_temp,
lambda_milc,
gRodon_model_euk,
gRodon_model_euk_temp,
lambda_milc_euk))
}
#' Fit gRodon GC-corrected models
#'
#' This function fits the gRodon GC-corrected metagenome mode models
#'
#' @param stat_data dataframe with codon usage statistics and known doubling times
fitGCModels <- function(stat_data, stat_data_extremo){
stat_data <- stat_data %>%
mutate(dCUB=(CUB-CUBHE)/CUB)
stat_data_extremo <- stat_data_extremo %>%
mutate(dCUB=(CUB-CUBHE)/CUB)
bc_meta <- boxcox(d~dCUB+GCdiv,data=stat_data)
lambda_meta <- bc_meta$x[which.max(bc_meta$y)]
#new metagenome mode
meta_model_base <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+GCdiv,data=stat_data)
meta_model_temp <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+GCdiv+OGT,data=stat_data_extremo)
#new metagenome mode without gc cor
meta_nogc_model_base <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB,data=stat_data)
meta_nogc_model_temp <-
lm(boxcoxTransform(d, lambda_meta) ~ dCUB+OGT,data=stat_data_extremo)
return(list(meta_model_base,
meta_model_temp,
meta_nogc_model_base,
meta_nogc_model_temp,
lambda_meta))
}
model_list <- gRodon:::fitModels(stat_data, stat_data_extremo)
stat_data
model_list <- gRodon:::fitGCModels(stat_data, stat_data_extremo)
model_list <- fitModels(stat_data, stat_data_extremo)
model_list <- fitgcModels(stat_data, stat_data_extremo)
model_list <- fitGCModels(stat_data, stat_data_extremo)
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
model_list <- fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
gRodon_model_newmeta_temp_i <- model_list[[2]]
gRodon_model_newmeta_nogc_i <- model_list[[3]]
gRodon_model_newmeta_nogc_temp_i <- model_list[[4]]
lambda_newmeta_i <- model_list[[5]]
summary(gRodon_model_newmeta_i)
load("sysdata.rda")
setwd("~/gRodon2/R/")
load("sysdata.rda")
summary(gRodon_model_newmeta)
summary(gRodon_model_newmeta_nogc_i)
summary(gRodon_model_newmeta_nogc)
save(gRodon_model_base_madin,
gRodon_model_temp_madin,
gRodon_model_partial_madin,
gRodon_model_partial_temp_madin,
gRodon_model_meta_madin,
gRodon_model_meta_temp_madin,
lambda_milc_madin,
gRodon_model_base,
gRodon_model_temp,
gRodon_model_partial,
gRodon_model_partial_temp,
gRodon_model_meta,
gRodon_model_meta_temp,
lambda_milc,
gRodon_model_newmeta,
gRodon_model_newmeta_temp,
gRodon_model_newmeta_nogc,
gRodon_model_newmeta_nogc_temp,
lambda_newmeta,
gRodon_model_newmeta_i,
gRodon_model_newmeta_temp_i,
gRodon_model_newmeta_nogc_i,
gRodon_model_newmeta_nogc_temp_i,
lambda_newmeta_i,
file="sysdata.rda")
head(cu)
cui <- cu
load("CodonStatistics_Madin.rda")
setwd("~/gRodon2/inst/extdata/")
load("CodonStatistics_Madin.rda")
load("GrowthRates_Madin.rda")
load("Accession2Species_Madin.rda")
cu <- cu %>% mutate_all(unlist)
names(d)[1] <- "Species"
d <- d %>% as.data.frame(stringsAsFactors=F)
# Merge datasets
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Spp <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Spp,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu$Species[cu$Spp %in% d$Species] <- cu$Spp[cu$Spp %in% d$Species]
cu <- merge.easy(cu,d,key="Species") %>% subset(!is.na(Species))
head(cu)
head(cui)
x1 <- cu %>% subset(select=c(AccessionCUB,CUBHE))
x1 <- cu %>% subset(select=c(Accession,CUB,CUBHE))
x1 <- cu %>% subset(select=c(Accession,CUBHE))
x2 <- cui %>% subset(select=c(Accession,CUBHE))
load("GrowthRates_Madin.rda")
load("CodonStatistics_GC.rda")
load("Accession2Species_Madin.rda")
cu <- cu %>% mutate_all(unlist)
names(d)[1] <- "Species"
d <- d %>% as.data.frame(stringsAsFactors=F)
# Merge datasets
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Spp <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Spp,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu$Species[cu$Spp %in% d$Species] <- cu$Spp[cu$Spp %in% d$Species]
cu <- merge.easy(cu,d,key="Species") %>% subset(!is.na(Species))
head(cu)
x1 <- cu %>% subset(select=c(Accession,CUB,CUBHE))
x2 <- cui %>% subset(select=c(Accession,CUB,CUBHE))
x1$dCUB <- (x1$CUB-x1$CUBHE)/x1$CUB
x2$dCUB <- (x2$CUB-x2$CUBHE)/x2$CUB
x <- merge.easy(x2,x1,key="Accession")
plot(x$CUB.x,x$CUB.y)
plot(x$CUBHE.x,x$CUBHE.y)
plot(x$dCUB.x,x$dCUB.y)
library(ggplot2)
ggplot(x,aes(x=dCUB.x,y=dCUB.y)) + geom_point(alpha=0.1) + stat_smooth()
cor(x$dCUB.x,x$dCUB.y)
cor.test(x$dCUB.x,x$dCUB.y)
setwd("~/gRodon2/inst/extdata/")
load("GrowthRates_Madin.rda")
load("CodonStatistics_individual100.rda")
load("Accession2Species_Madin.rda")
cu <- cu %>% mutate_all(unlist)
names(d)[1] <- "Species"
d <- d %>% as.data.frame(stringsAsFactors=F)
# Merge datasets
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Spp <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Spp,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu$Species[cu$Spp %in% d$Species] <- cu$Spp[cu$Spp %in% d$Species]
cu <- merge.easy(cu,d,key="Species") %>% subset(!is.na(Species))
x2 <- cu %>% subset(select=c(Accession,CUB,CUBHE))
x2$dCUB <- (x2$CUB-x2$CUBHE)/x2$CUB
x <- merge.easy(x2,x1,key="Accession")
ggplot(x,aes(x=dCUB.x,y=dCUB.y)) + geom_point(alpha=0.1) + stat_smooth()
cor.test(x$dCUB.x,x$dCUB.y)
# Average CUB estimates over species
stat_data <- cu %>%
subset(Extremophile == FALSE) %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
# Average CUB estimates over species, including extremophiles
stat_data_extremo <- cu %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
stat_data_extremo$OGT <- stat_data_extremo$OptTemp
stat_data_extremo$OGT[is.na(stat_data_extremo$OGT)] <-
stat_data_extremo$GrowthTemp[is.na(stat_data_extremo$OGT)]
model_list <- gRodon:::fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
gRodon_model_newmeta_temp_i <- model_list[[2]]
gRodon_model_newmeta_nogc_i <- model_list[[3]]
gRodon_model_newmeta_nogc_temp_i <- model_list[[4]]
summary(gRodon_model_newmeta_i)
summary(gRodon_model_newmeta)
summary(gRodon_model_newmeta_nogc_i)
summary(gRodon_model_newmeta_nogc)
gRodon_model_newmeta_nogc_i <- model_list[[3]]
summary(gRodon_model_newmeta_nogc)
summary(gRodon_model_newmeta_nogc_i)
setwd("~/gRodon2/inst/extdata/")
load("GrowthRates_Madin.rda")
load("CodonStatistics_individual_le10.rda")
load("Accession2Species_Madin.rda")
cu <- cu %>% mutate_all(unlist)
names(d)[1] <- "Species"
d <- d %>% as.data.frame(stringsAsFactors=F)
# Merge datasets
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Spp <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Spp,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu$Species[cu$Spp %in% d$Species] <- cu$Spp[cu$Spp %in% d$Species]
cu <- merge.easy(cu,d,key="Species") %>% subset(!is.na(Species))
# Average CUB estimates over species
stat_data <- cu %>%
subset(Extremophile == FALSE) %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
# Average CUB estimates over species, including extremophiles
stat_data_extremo <- cu %>%
group_by(Species) %>%
summarise_all(mean,na.rm=T) %>%
subset(!is.na(Species))
stat_data_extremo$OGT <- stat_data_extremo$OptTemp
stat_data_extremo$OGT[is.na(stat_data_extremo$OGT)] <-
stat_data_extremo$GrowthTemp[is.na(stat_data_extremo$OGT)]
model_list <- gRodon:::fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
gRodon_model_newmeta_temp_i <- model_list[[2]]
gRodon_model_newmeta_nogc_i <- model_list[[3]]
gRodon_model_newmeta_nogc_temp_i <- model_list[[4]]
lambda_newmeta_i <- model_list[[5]]
summary(gRodon_model_newmeta_i)
summary(gRodon_model_newmeta_nogc_i)
x2 <- cu %>% subset(select=c(Accession,CUB,CUBHE))
x2$dCUB <- (x2$CUB-x2$CUBHE)/x2$CUB
x <- merge.easy(x2,x1,key="Accession")
ggplot(x,aes(x=dCUB.x,y=dCUB.y)) + geom_point(alpha=0.1) + stat_smooth()
cor.test(x$dCUB.x,x$dCUB.y)
model_list <- gRodon:::fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
model_list <- fitGCModels(stat_data, stat_data_extremo)
gRodon_model_newmeta_i <- model_list[[1]]
gRodon_model_newmeta_temp_i <- model_list[[2]]
gRodon_model_newmeta_nogc_i <- model_list[[3]]
gRodon_model_newmeta_nogc_temp_i <- model_list[[4]]
lambda_newmeta_i <- model_list[[5]]
summary(gRodon_model_newmeta_i)
summary(gRodon_model_newmeta_nogc_i)
